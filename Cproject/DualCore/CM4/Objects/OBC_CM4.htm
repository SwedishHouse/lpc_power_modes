<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\OBC_CM4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\OBC_CM4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Mar  1 13:02:50 2023
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USART3_Transfer &rArr; USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC0_IRQHandler</a><BR>
 <LI><a href="#[d3]">USART_Control</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d3]">USART_Control</a><BR>
 <LI><a href="#[dd]">USART_Send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dc]">USART_Receive</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1e]">ADC1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[35]">ADCHS_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[36]">ATIMER_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3a]">C_CAN0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[34]">C_CAN1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[a]">DAC_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[c]">DMA_IRQHandler</a> from gpdma_lpc43xx.o(.text.DMA_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[e]">ETHERNET_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[33]">EVENTROUTER_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[d]">FLASHEEPROM_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[31]">GINT0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[32]">GINT1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1b]">I2C0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[25]">I2S0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[26]">I2S1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[10]">LCD_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[b]">M0APP_IRQHandler</a> from samsat_queue.o(.text.M0APP_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[39]">M0SUB_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[19]">MCPWM_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[29]">PIN_INT0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2a]">PIN_INT1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2b]">PIN_INT2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2c]">PIN_INT3_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2d]">PIN_INT4_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2e]">PIN_INT5_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[2f]">PIN_INT6_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[30]">PIN_INT7_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3b]">QEI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[14]">RITIMER_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[37]">RTC_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[13]">SCT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[f]">SDIO_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[28]">SGPIO_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[27]">SPIFI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1d]">SPI_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[1f]">SSP0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[20]">SSP1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from cm4_main.o(.text.SysTick_Handler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3c]">SystemInit</a> from system_lpc43xx.o(.text.SystemInit) referenced from startup_lpc43xx.o(.text)
 <LI><a href="#[15]">TIMER0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[16]">TIMER1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[17]">TIMER2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[18]">TIMER3_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[22]">UART1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[21]">USART0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[23]">USART2_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[4c]">USART3_Control</a> from usart_lpc43xx.o(.text.USART3_Control) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[43]">USART3_GetCapabilities</a> from usart_lpc43xx.o(.text.USART3_GetCapabilities) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[4f]">USART3_GetModemStatus</a> from usart_lpc43xx.o(.text.USART3_GetModemStatus) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[4b]">USART3_GetRxCount</a> from usart_lpc43xx.o(.text.USART3_GetRxCount) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[4d]">USART3_GetStatus</a> from usart_lpc43xx.o(.text.USART3_GetStatus) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[4a]">USART3_GetTxCount</a> from usart_lpc43xx.o(.text.USART3_GetTxCount) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[24]">USART3_IRQHandler</a> from usart_lpc43xx.o(.text.USART3_IRQHandler) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[44]">USART3_Initialize</a> from usart_lpc43xx.o(.text.USART3_Initialize) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[46]">USART3_PowerControl</a> from usart_lpc43xx.o(.text.USART3_PowerControl) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[48]">USART3_Receive</a> from usart_lpc43xx.o(.text.USART3_Receive) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[47]">USART3_Send</a> from usart_lpc43xx.o(.text.USART3_Send) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[4e]">USART3_SetModemControl</a> from usart_lpc43xx.o(.text.USART3_SetModemControl) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[49]">USART3_Transfer</a> from usart_lpc43xx.o(.text.USART3_Transfer) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[45]">USART3_Uninitialize</a> from usart_lpc43xx.o(.text.USART3_Uninitialize) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[42]">USARTx_GetVersion</a> from usart_lpc43xx.o(.text.USARTx_GetVersion) referenced from usart_lpc43xx.o(.rodata.Driver_USART3)
 <LI><a href="#[11]">USB0_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[12]">USB1_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[38]">WWDT_IRQHandler</a> from startup_lpc43xx.o(.text) referenced from startup_lpc43xx.o(RESET)
 <LI><a href="#[3d]">__main</a> from __main.o(!!!main) referenced from startup_lpc43xx.o(.text)
 <LI><a href="#[40]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3e]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
 <LI><a href="#[41]">myUSART_callback</a> from samsat_uart.o(.text.myUSART_callback) referenced 2 times from samsat_uart.o(.text.samsat_uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[52]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fa]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fb]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[fc]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[fd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[53]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[9a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[55]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[57]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5a]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5b]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[fe]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[5d]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[60]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[61]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[63]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[65]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[67]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[68]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[69]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[6b]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[ff]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[6d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[6f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[71]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[73]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[100]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[75]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[101]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[77]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[102]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[103]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[104]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[79]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[108]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[109]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[111]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[112]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[113]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[114]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[84]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[117]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[119]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[11a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[11c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[11d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[80]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemInit &rArr; SystemInit_ExtMemCtl &rArr; WaitUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[aa]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[83]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[11f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[85]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADCHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ATIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>C_CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>C_CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ETHERNET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EVENTROUTER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FLASHEEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>M0SUB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RITIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SGPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>USB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc43xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc43xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[120]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Uart
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Uart
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_pushMsgTout
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_popMsgTout
</UL>

<P><STRONG><a name="[89]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[121]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[123]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[8f]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[90]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[91]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8d]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5e]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[54]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[88]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[3e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[66]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[97]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[62]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[6a]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[98]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[64]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[6c]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[56]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[93]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[96]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[a4]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[6e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[70]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a5]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[72]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[74]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[a6]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[95]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[7d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a7]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[78]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[a2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[9c]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[86]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[12e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>Chip_IAP_CopyRamToFlash</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, iap_18xx_43xx.o(.text.Chip_IAP_CopyRamToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_IAP_CopyRamToFlash &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>Chip_IAP_EraseSector</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, iap_18xx_43xx.o(.text.Chip_IAP_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_IAP_EraseSector &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>Chip_IAP_Init</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, iap_18xx_43xx.o(.text.Chip_IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_IAP_Init &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>Chip_IAP_PreSectorForReadWrite</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, iap_18xx_43xx.o(.text.Chip_IAP_PreSectorForReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chip_IAP_PreSectorForReadWrite &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>Chip_IAP_ReadPID</STRONG> (Thumb, 22 bytes, Stack size 48 bytes, iap_18xx_43xx.o(.text.Chip_IAP_ReadPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_IAP_ReadPID &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>Chip_IAP_SetBootFlashBank</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, iap_18xx_43xx.o(.text.Chip_IAP_SetBootFlashBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chip_IAP_SetBootFlashBank &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>DMA_IRQHandler</STRONG> (Thumb, 586 bytes, Stack size 24 bytes, gpdma_lpc43xx.o(.text.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_IRQHandler &rArr; Clear_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>GPDMA_ChannelConfigure</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, gpdma_lpc43xx.o(.text.GPDMA_ChannelConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPDMA_ChannelConfigure &rArr; Set_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Channel_active_flag
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>

<P><STRONG><a name="[b5]"></a>GPDMA_ChannelDisable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gpdma_lpc43xx.o(.text.GPDMA_ChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPDMA_ChannelDisable &rArr; Clear_Channel_active_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[e4]"></a>GPDMA_ChannelGetCount</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gpdma_lpc43xx.o(.text.GPDMA_ChannelGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_ChannelGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>

<P><STRONG><a name="[b6]"></a>GPDMA_Initialize</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, gpdma_lpc43xx.o(.text.GPDMA_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPDMA_Initialize &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[e9]"></a>GPDMA_PeripheralSelect</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gpdma_lpc43xx.o(.text.GPDMA_PeripheralSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_PeripheralSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>

<P><STRONG><a name="[b9]"></a>GPDMA_Uninitialize</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpdma_lpc43xx.o(.text.GPDMA_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPDMA_Uninitialize &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>

<P><STRONG><a name="[bb]"></a>GetClockFreq</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, system_lpc43xx.o(.text.GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetClockFreq &rArr; GetClkSel
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPLL1Param
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[ee]"></a>IPC_getM0RespFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, samsat_queue.o(.text.IPC_getM0RespFlag))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>IPC_getM4Flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, samsat_queue.o(.text.IPC_getM4Flag))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>IPC_initMsgQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, samsat_queue.o(.text.IPC_initMsgQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IPC_initMsgQueue &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>IPC_msgNotify</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, samsat_queue.o(.text.IPC_msgNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPC_msgNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipc_send_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>IPC_popMsgTout</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, samsat_queue.o(.text.IPC_popMsgTout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IPC_popMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_tryPopMsg
</UL>

<P><STRONG><a name="[c5]"></a>IPC_pushMsgTout</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, samsat_queue.o(.text.IPC_pushMsgTout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IPC_pushMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_tryPushMsg
</UL>

<P><STRONG><a name="[c8]"></a>IPC_setM0RespFlag</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, samsat_queue.o(.text.IPC_setM0RespFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IPC_setM0RespFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M0APP_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>IPC_setM4Flag</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, samsat_queue.o(.text.IPC_setM4Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IPC_setM4Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>Load_CM0_Image</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, cm4_main.o(.text.Load_CM0_Image))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Load_CM0_Image
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>M0APP_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, samsat_queue.o(.text.M0APP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M0APP_IRQHandler &rArr; IPC_setM0RespFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_setM0RespFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>Print_Uart</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, developer_kit_lpc4357_rev_c.o(.text.Print_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print_Uart &rArr; samsat_uart_write &rArr; _delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samsat_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>SCU_PinConfigure</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, scu_lpc43xx.o(.text.SCU_PinConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCU_PinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PIN_Configure
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cm4_main.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, system_lpc43xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemCoreClockUpdate &rArr; GetClockFreq &rArr; GetClkSel
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3c]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_lpc43xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemInit &rArr; SystemInit_ExtMemCtl &rArr; WaitUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_lpc43xx.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART3_IRQHandler &rArr; USART_IRQHandler &rArr; USART_RxLineIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc43xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>USART_SetBaudrate</STRONG> (Thumb, 1456 bytes, Stack size 72 bytes, usart_lpc43xx.o(.text.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART_SetBaudrate &rArr; GetClockFreq &rArr; GetClkSel
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[f0]"></a>_delay_ms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cm4_main.o(.text._delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samsat_uart_write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>main</STRONG> (Thumb, 1424 bytes, Stack size 88 bytes, cm4_main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = main &rArr; SystemInit &rArr; SystemInit_ExtMemCtl &rArr; WaitUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samsat_uart_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Uart
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_CM0_Image
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_setM4Flag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_setM0RespFlag
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_msgNotify
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_initMsgQueue
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_getM4Flag
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_getM0RespFlag
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_SetBootFlashBank
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_ReadPID
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_PreSectorForReadWrite
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_EraseSector
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_CopyRamToFlash
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_tryPushMsg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_tryPopMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ea]"></a>samsat_uart_init</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, samsat_uart.o(.text.samsat_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = samsat_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>samsat_uart_write</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, samsat_uart.o(.text.samsat_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = samsat_uart_write &rArr; _delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Uart
</UL>

<P><STRONG><a name="[9d]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f4]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[f3]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[f5]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f6]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[9e]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f7]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[a1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[99]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7b]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[40]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[131]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[132]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[58]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[5c]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c6]"></a>IPC_tryPopMsg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cm4_main.o(.text.IPC_tryPopMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IPC_tryPopMsg &rArr; IPC_popMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_popMsgTout
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>IPC_tryPushMsg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cm4_main.o(.text.IPC_tryPushMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IPC_tryPushMsg &rArr; IPC_pushMsgTout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_pushMsgTout
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>SysTick_Config</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cm4_main.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, cm4_main.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, cm4_main.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cm4_main.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[c0]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, samsat_queue.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_initMsgQueue
</UL>

<P><STRONG><a name="[bf]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, samsat_queue.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_initMsgQueue
</UL>

<P><STRONG><a name="[c2]"></a>ipc_send_signal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, samsat_queue.o(.text.ipc_send_signal))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPC_msgNotify
</UL>

<P><STRONG><a name="[41]"></a>myUSART_callback</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, samsat_uart.o(.text.myUSART_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = myUSART_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> samsat_uart.o(.text.samsat_uart_init)
</UL>
<P><STRONG><a name="[ac]"></a>iap_entry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, iap_18xx_43xx.o(.text.iap_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_SetBootFlashBank
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_ReadPID
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_PreSectorForReadWrite
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_EraseSector
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_IAP_CopyRamToFlash
</UL>

<P><STRONG><a name="[4c]"></a>USART3_Control</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USART3_Control &rArr; USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[43]"></a>USART3_GetCapabilities</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_GetCapabilities &rArr; USART_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[4f]"></a>USART3_GetModemStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_GetModemStatus &rArr; USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[4b]"></a>USART3_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_lpc43xx.o(.text.USART3_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_GetRxCount &rArr; USART_GetRxCount &rArr; GPDMA_ChannelGetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[4d]"></a>USART3_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_GetTxCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_lpc43xx.o(.text.USART3_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_GetTxCount &rArr; USART_GetTxCount &rArr; GPDMA_ChannelGetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[44]"></a>USART3_Initialize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART3_Initialize &rArr; USART_Initialize &rArr; GPDMA_Initialize &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[46]"></a>USART3_PowerControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART3_PowerControl &rArr; USART_PowerControl &rArr; USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[48]"></a>USART3_Receive</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = USART3_Receive &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[47]"></a>USART3_Send</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USART3_Send &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[4e]"></a>USART3_SetModemControl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART3_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_SetModemControl &rArr; USART_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[49]"></a>USART3_Transfer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usart_lpc43xx.o(.text.USART3_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = USART3_Transfer &rArr; USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[45]"></a>USART3_Uninitialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_lpc43xx.o(.text.USART3_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = USART3_Uninitialize &rArr; USART_Uninitialize &rArr; USART_PowerControl &rArr; USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[d3]"></a>USART_Control</STRONG> (Thumb, 2662 bytes, Stack size 104 bytes, usart_lpc43xx.o(.text.USART_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PinConfigure
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PIN_Configure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Control
</UL>

<P><STRONG><a name="[d4]"></a>USART_GetCapabilities</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_lpc43xx.o(.text.USART_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetCapabilities
</UL>

<P><STRONG><a name="[d5]"></a>USART_GetModemStatus</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, usart_lpc43xx.o(.text.USART_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetModemStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetModemStatus
</UL>

<P><STRONG><a name="[d6]"></a>USART_GetRxCount</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_GetRxCount &rArr; GPDMA_ChannelGetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetRxCount
</UL>

<P><STRONG><a name="[d7]"></a>USART_GetStatus</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, usart_lpc43xx.o(.text.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetStatus
</UL>

<P><STRONG><a name="[d8]"></a>USART_GetTxCount</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_GetTxCount &rArr; GPDMA_ChannelGetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetTxCount
</UL>

<P><STRONG><a name="[d9]"></a>USART_IRQHandler</STRONG> (Thumb, 880 bytes, Stack size 48 bytes, usart_lpc43xx.o(.text.USART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART_IRQHandler &rArr; USART_RxLineIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RxLineIntHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>USART_Initialize</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, usart_lpc43xx.o(.text.USART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART_Initialize &rArr; GPDMA_Initialize &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PinConfigure
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
</UL>

<P><STRONG><a name="[e1]"></a>USART_PIN_Configure</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, usart_lpc43xx.o(.text.USART_PIN_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART_PIN_Configure &rArr; SCU_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[db]"></a>USART_PowerControl</STRONG> (Thumb, 908 bytes, Stack size 48 bytes, usart_lpc43xx.o(.text.USART_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USART_PowerControl &rArr; USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PowerControl
</UL>

<P><STRONG><a name="[dc]"></a>USART_Receive</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, usart_lpc43xx.o(.text.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_PeripheralSelect
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Receive
</UL>

<P><STRONG><a name="[e5]"></a>USART_RxLineIntHandler</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, usart_lpc43xx.o(.text.USART_RxLineIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_RxLineIntHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>USART_Send</STRONG> (Thumb, 586 bytes, Stack size 64 bytes, usart_lpc43xx.o(.text.USART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + In Cycle
<LI>Call Chain = USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_PeripheralSelect
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
</UL>

<P><STRONG><a name="[de]"></a>USART_SetModemControl</STRONG> (Thumb, 242 bytes, Stack size 12 bytes, usart_lpc43xx.o(.text.USART_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_SetModemControl
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_SetModemControl
</UL>

<P><STRONG><a name="[df]"></a>USART_Transfer</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, usart_lpc43xx.o(.text.USART_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Transfer
</UL>

<P><STRONG><a name="[e0]"></a>USART_Uninitialize</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, usart_lpc43xx.o(.text.USART_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART_Uninitialize &rArr; USART_PowerControl &rArr; USART_Control &rArr;  USART_Control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PinConfigure
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Uninitialize
</UL>

<P><STRONG><a name="[42]"></a>USARTx_GetVersion</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usart_lpc43xx.o(.text.USARTx_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USARTx_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lpc43xx.o(.rodata.Driver_USART3)
</UL>
<P><STRONG><a name="[e7]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, usart_lpc43xx.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[e6]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, usart_lpc43xx.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[e8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, usart_lpc43xx.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[b2]"></a>Clear_Channel_active_flag</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, gpdma_lpc43xx.o(.text.Clear_Channel_active_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Clear_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelDisable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>

<P><STRONG><a name="[b4]"></a>Set_Channel_active_flag</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, gpdma_lpc43xx.o(.text.Set_Channel_active_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_Channel_active_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelConfigure
</UL>

<P><STRONG><a name="[b7]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gpdma_lpc43xx.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
</UL>

<P><STRONG><a name="[ba]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, gpdma_lpc43xx.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Uninitialize
</UL>

<P><STRONG><a name="[b8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gpdma_lpc43xx.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Initialize
</UL>

<P><STRONG><a name="[bd]"></a>GetClkSel</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, system_lpc43xx.o(.text.GetClkSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>

<P><STRONG><a name="[bc]"></a>GetPLL1Param</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, system_lpc43xx.o(.text.GetPLL1Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetPLL1Param
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>

<P><STRONG><a name="[cf]"></a>SetClock</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, system_lpc43xx.o(.text.SetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d0]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 1968 bytes, Stack size 112 bytes, system_lpc43xx.o(.text.SystemInit_ExtMemCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemInit_ExtMemCtl &rArr; WaitUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d2]"></a>WaitUs</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, system_lpc43xx.o(.text.WaitUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WaitUs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit_ExtMemCtl
</UL>

<P><STRONG><a name="[3f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
